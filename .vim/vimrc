source ~/.exrc
set nocompatible
if has('eval')
	let s:runtimepath_first = split(&runtimepath, ',')[0]
	let s:runtimepath_dein = s:runtimepath_first . '/repos/github.com/Shougo/dein.vim'
	if &runtimepath !~# s:runtimepath_dein | let &runtimepath .= ',' . s:runtimepath_dein | endif
	try
		if ! isdirectory(s:runtimepath_dein) | execute '!git clone http://github.com/Shougo/dein.vim ' . s:runtimepath_dein | endif
		if dein#load_state(s:runtimepath_first)
			call dein#begin(s:runtimepath_first)
			call dein#add('Shougo/dein.vim')
			call dein#add('t9md/vim-quickhl')
			call dein#add('thinca/vim-quickrun')
			call dein#add('junegunn/fzf.vim')
			call dein#add('airblade/vim-gitgutter')
			call dein#add('Shougo/neocomplete.vim')
			call dein#add('Shougo/neosnippet.vim')
			call dein#add('Shougo/neosnippet-snippets')
			call dein#add('justmao945/vim-clang')
			call dein#add('aklt/plantuml-syntax')
			call dein#add('itchyny/lightline.vim')
			call dein#add('tyru/open-browser.vim')
			call dein#add('previm/previm')
			call dein#add('tomasr/molokai')
			call dein#add('nanotech/jellybeans.vim')
			call dein#add('w0ng/vim-hybrid')
			call dein#add('mhinz/vim-janah')
			call dein#add('jpo/vim-railscasts-theme')
			call dein#add('morhetz/gruvbox')
			call dein#add('AlessandroYorba/Alduin')
			call dein#add('djjcast/mirodark')
			call dein#add('jonathanfilip/vim-lucius')
			call dein#add('NLKNguyen/papercolor-theme')
			call dein#add('reedes/vim-colors-pencil')
			call dein#add('altercation/vim-colors-solarized')
			call dein#add('vim-scripts/twilight')
			call dein#end()
			call dein#save_state()
		endif
		if dein#check_install() | call dein#install() | endif
	catch /E117.*/
	endtry
endif
set notitle
set ruler
set nowrap
set cursorline
set showtabline=1
set ambiwidth=double
set showcmd
set laststatus=2
set shortmess+=mrwI
set modeline
set modelines=5
set history=10000
set wildmenu
set wildmode=longest,list:longest,list:full
set wildoptions=tagfile
set backspace=indent,eol,start
set hidden
set helplang=ja,en
set ignorecase
set smartcase
set incsearch
set hlsearch
map  :nohl
set noundofile
set nobackup
set nowritebackup
set browsedir=buffer
set matchtime=1
set updatetime=100
set list
set listchars=tab:Â»-,trail:-,extends:Â»,precedes:Â«,nbsp:%,eol:â†²
set splitbelow
set splitright
set smarttab
set cindent
set showfulltag
set tags=./.tags;,./.TAGS;,./tags;,./TAGS;,.tags;,.TAGS;,tags;,TAGS;
set path=.,,/usr/local/include,/usr/include
set clipboard=unnamed,unnamedplus,autoselect
set virtualedit=block
if $TERMCAP =~# ':\?Co#256:' | set t_Co=256 | endif
if &viminfo !~# ',n' | let &viminfo .= ',n' . split(&runtimepath, ',')[0] . '/viminfo' | endif
if executable('hw')
	set grepprg=hw\ $*\ /dev/null
elseif executable('pt')
	set grepprg=pt\ $*\ /dev/null
elseif executable('ag')
	set grepprg=ag\ $*\ /dev/null
endif
if has('eval')
	function! FlagToStr(var, val)
		if a:var | return a:val | else | return '' | endif
	endfunction
	set statusline=%{printf('[%2d:%2s%1s][%3s\|%s][%1s]',bufnr('%'),FlagToStr(&readonly,'RO'),FlagToStr(&modified,'+'),&fileencoding,&fileformat,&filetype)}\ %<%F\ %h%wc:%05b(0x%04B)%=(%l,%3c%V)%3p%%\ of\ %L\ lines%a[%P]
endif
function! MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
		if i + 1 == tabpagenr() | let s .= '%#TabLineSel#' | else | let s .= '%#TabLine#' | endif
		let s .= '%' . (i + 1) . 'T'
		let s .= ' [%{MyTabLabel(' . (i + 1) . ')}] '
	endfor
	let s .= '%#TabLineFill#%T'
	if tabpagenr('$') > 1 | let s .= '%=%#TabLine#%999Xclose' | endif
	return s
endfunction
function! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	return printf('%5.20S', bufname(buflist[winnr - 1]))
endfunction
set tabline=%!MyTabLine()
if has('folding') | set foldcolumn=2 | endif
if has('mouse') | set mouse+=ar nomousehide mousemodel=popup_setpos | endif
if has('syntax') | syntax on | endif
if has('filetype') | filetype plugin indent on | endif
if has('insert_expand') | set completeopt=menu,preview,longest | endif
if has('windows') && has('folding') | set fillchars=diff:\  | endif
if has('diff') | set diffopt=filler,vertical,foldcolumn:2 | endif
if has('autocmd')
	augroup MkViewLoadView
		autocmd!
		autocmd BufWinLeave ?* silent! mkview
		autocmd BufWinEnter ?* silent! loadview
	augroup END
	augroup QuickFixCmd
		autocmd!
		autocmd QuickFixCmdPost *grep* cwindow
	augroup END
	if has('syntax')
		augroup MyHighLights
			autocmd!
			autocmd VimEnter,WinEnter * runtime after/highlights.vim
		augroup END
	endif
endif
runtime vim-quickhl.vim
runtime vim-gitgutter.vim
runtime neocomplete.vim
runtime neosnippet.vim
runtime vim-clang.vim
runtime lightline.vim
runtime vimrc.local.vim
