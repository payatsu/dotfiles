source ~/.exrc

" compatible option should be modified (set/reset) at the very start of vimrc
setglobal nocompatible

" don't set window title
setglobal notitle

" show the line and column number of the cursor position
setglobal ruler

" show (partial) command in the last line of the screen
setglobal showcmd

set list
set listchars=eol:‚Ü≤,space:‚ê£,extends:¬ª,precedes:¬´,nbsp:%
if has('patch-8.1.0759')
	set listchars+=tab::-¬ª
else
	set listchars+=tab:-¬ª
endif

" shorten some types of messages
setglobal shortmess+=mrwI

" enhance command-line completion
setglobal wildmenu
setglobal wildoptions=fuzzy,pum,tagfile
setglobal wildmode=longest,full

" show always('2') status line
setglobal laststatus=2

" a history of ":" commands and a history of previous search patterns is remembered
setglobal history=10000

" minimal number of screen lines to keep above and below the cursor
setglobal scrolloff=0

" keep the cursor in the same column (if possible) in some commands
setglobal nostartofline

" allow buffers to become hidden when it is abandoned
setglobal hidden

" modify backspace behavior in Insert mode
setglobal backspace=indent,eol,start

" ignore case in search patterns, command-line completions, and so on
setglobal ignorecase

" override the 'ignorecase' option if the search pattern contains upper case characters
setglobal smartcase

" enable incremental search
setglobal incsearch

" highlight all the search pattern matches
setglobal hlsearch
map  :nohlsearch

" disable undo file
set noundofile

" disable backup file
setglobal nobackup
setglobal nowritebackup

" time to show the matching paren, when 'showmatch' is set
setglobal matchtime=1

" preferred language for help
setglobal helplang=ja

" highlight the text line of the cursor
set cursorline

" don't wrap
set nowrap

" enable modeline feature
set modeline

" define bases for CTRL-A and CTRL-X
set nrformats=alpha,hex,bin,blank

" disable bell for all events
if exists('+belloff')
	setglobal belloff=all
endif

if !exists('g:vscode')
	setglobal ambiwidth=double
endif

" maximum number of tab pages to be opened by the -p command line argument or the ":tab all" command
setglobal tabpagemax=50

if has('eval')
	let s:runtimepath_first = split(&runtimepath, ',')[0]
	let s:runtimepath_cache = s:runtimepath_first . '/.cache/' . (has('nvim') ? 'nvim' : 'vim')
	let s:runtimepath_dein = s:runtimepath_cache . '/repos/github.com/Shougo/dein.vim'
	if &runtimepath !~# s:runtimepath_dein | execute 'set runtimepath+=' . s:runtimepath_dein | endif
	try
		if executable('git') && ! isdirectory(s:runtimepath_dein) | execute '!git clone https://github.com/Shougo/dein.vim ' . s:runtimepath_dein | endif
		call dein#begin(s:runtimepath_cache)
		call dein#add('Shougo/dein.vim')
		call dein#add('t9md/vim-quickhl')
		call dein#add('thinca/vim-quickrun')
		call dein#add('junegunn/fzf.vim')
		call dein#add('airblade/vim-gitgutter')
		call dein#add('rust-lang/rust.vim')
		call dein#add('aklt/plantuml-syntax')
		call dein#add('itchyny/lightline.vim')
		call dein#add('tyru/open-browser.vim')
		call dein#add('previm/previm')
		call dein#add('prabirshrestha/vim-lsp')
		call dein#add('prabirshrestha/asyncomplete.vim')
		call dein#add('prabirshrestha/asyncomplete-lsp.vim')
		call dein#add('hrsh7th/vim-vsnip')
		call dein#add('hrsh7th/vim-vsnip-integ')
		call dein#add('tomasr/molokai')
		call dein#add('nanotech/jellybeans.vim')
		call dein#add('w0ng/vim-hybrid')
		call dein#add('morhetz/gruvbox')
		call dein#add('mhinz/vim-janah')
		call dein#add('joshdick/onedark.vim')
		call dein#add('jpo/vim-railscasts-theme')
		call dein#add('AlessandroYorba/Alduin')
		call dein#add('djjcast/mirodark')
		call dein#add('jonathanfilip/vim-lucius')
		call dein#add('NLKNguyen/papercolor-theme')
		call dein#add('reedes/vim-colors-pencil')
		call dein#add('altercation/vim-colors-solarized')
		call dein#add('vim-scripts/twilight')
		call dein#end()
		if dein#check_install() | call dein#install() | endif
	catch /E117.*/
	catch /E475.*/
	endtry
endif
set splitbelow
set splitright
set smarttab
set cindent
set showfulltag
set tags=./.tags;,./.TAGS;,./tags;,./TAGS;,.tags;,.TAGS;,tags;,TAGS;
set path=.,,/usr/local/include,/usr/include
set clipboard=unnamed,unnamedplus
set virtualedit=block
if $TERMCAP =~# ':\?Co#256:' | set t_Co=256 | endif
if !isdirectory(s:runtimepath_cache) | call mkdir(s:runtimepath_cache, "p") | endif
let &directory = s:runtimepath_cache . "//"
if &viminfo !~# ',n' | let &viminfo .= ',n' . s:runtimepath_cache . '/viminfo' | endif
let &viewdir = s:runtimepath_cache . '/view'
if executable('rg')
	set grepprg=rg\ --vimgrep\ $*\ /dev/null
elseif executable('hw')
	set grepprg=hw\ $*\ /dev/null
elseif executable('pt')
	set grepprg=pt\ $*\ /dev/null
elseif executable('ag')
	set grepprg=ag\ $*\ /dev/null
endif
if has('eval')
	function! FlagToStr(var, val)
		if a:var | return a:val | else | return '' | endif
	endfunction
	set statusline=%{printf('[%2d:%2s%1s][%3s%s\|%s][%1s]',bufnr('%'),FlagToStr(&readonly,'RO'),FlagToStr(&modified,'+'),&fileencoding,FlagToStr(&bomb,'(BOM)'),&fileformat,&filetype)}\ %<%F\ %h%wc:%05b(0x%04B)%=(%l,%3c%V)%3p%%\ of\ %L\ lines%a[%P]
endif
function! MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
		if i + 1 == tabpagenr() | let s .= '%#TabLineSel#' | else | let s .= '%#TabLine#' | endif
		let s .= '%' . (i + 1) . 'T'
		let s .= ' [%{MyTabLabel(' . (i + 1) . ')}] '
	endfor
	let s .= '%#TabLineFill#%T'
	if tabpagenr('$') > 1 | let s .= '%=%#TabLine#%999Xclose' | endif
	return s
endfunction
function! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	return printf('%5.20S', bufname(buflist[winnr - 1]))
endfunction
set tabline=%!MyTabLine()
if has('folding') | set foldcolumn=2 | endif
if has('mouse') | set mouse+=ar nomousehide mousemodel=popup_setpos | endif
if has('syntax') | syntax on | endif
if has('filetype') | filetype plugin indent on | endif
if has('insert_expand') | set completeopt=menu,preview,longest | endif
if has('windows') && has('folding') | set fillchars=diff:\  | endif
if has('diff') | set diffopt=filler,vertical,foldcolumn:2 | endif
if has('autocmd')
	augroup MkViewLoadView
		autocmd!
		autocmd BufWinLeave ?* silent! mkview
		autocmd BufWinEnter ?* silent! loadview
	augroup END
	augroup QuickFixCmd
		autocmd!
		autocmd QuickFixCmdPost *grep* cwindow
	augroup END
	if has('syntax')
		augroup MyHighLights
			autocmd!
			autocmd WinEnter * runtime after/highlights.vim
		augroup END
	endif
endif
runtime vim-quickhl.vim
runtime vim-gitgutter.vim
runtime vim-lsp.vim
runtime vim-vsnip.vim
runtime lightline.vim
runtime vimrc.local.vim
